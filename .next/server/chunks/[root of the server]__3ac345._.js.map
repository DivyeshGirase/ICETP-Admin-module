{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Divyesh/Desktop/admin-module-nextjs/src/lib/db.ts"],"sourcesContent":["import mysql from \"mysql2\";\r\n\r\n// Create a pool of connections to the database\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || \"localhost\",  // Your MySQL host (defaults to localhost)\r\n  user: process.env.DB_USER || \"root\",      // Your MySQL user (defaults to root)\r\n  password: process.env.DB_PASSWORD || \"admin\",  // Your MySQL password (leave empty for local testing)\r\n  database: process.env.DB_NAME || \"icetp_db\",  // Your database name\r\n});\r\n\r\n// Use a promise wrapper to allow async/await\r\nconst db = pool.promise();\r\n\r\nexport default db;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,+CAA+C;AAC/C,MAAM,OAAO,iIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEA,6CAA6C;AAC7C,MAAM,KAAK,KAAK,OAAO;uCAER"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Divyesh/Desktop/admin-module-nextjs/src/app/api/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"@/lib/db\"; // Adjust the path to your DB connection file\r\n\r\ninterface Admin {\r\n  id: number;\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  const { username, password } = await req.json();\r\n  console.log(\"Login attempt:\", { username, password });\r\n\r\n  try {\r\n    // Explicitly type the query result\r\n    const [rows] = (await db.query(\"SELECT * FROM admin_users WHERE firstName = ?\", [username])) as [Admin[], any];\r\n    console.log(\"Query result:\", rows);\r\n\r\n    // Check if user exists\r\n    if (!rows || rows.length === 0) {\r\n      return NextResponse.json({ error: \"Invalid username or password\" }, { status: 401 });\r\n    }\r\n\r\n    const user = rows[0];\r\n\r\n    // Password comparison (plain text)\r\n    if (user.password !== password) { // Update for hashed passwords if needed\r\n      return NextResponse.json({ error: \"Invalid username or password\" }, { status: 401 });\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Login successful\" });\r\n    \r\n\r\n  } catch (error) {\r\n    console.error(\"Error during login:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,mMAA2B,6CAA6C;;;AAQjE,eAAe,KAAK,GAAY;IACrC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAC7C,QAAQ,GAAG,CAAC,kBAAkB;QAAE;QAAU;IAAS;IAEnD,IAAI;QACF,mCAAmC;QACnC,MAAM,CAAC,KAAK,GAAI,MAAM,kHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,iDAAiD;YAAC;SAAS;QAC1F,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,uBAAuB;QACvB,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,MAAM,OAAO,IAAI,CAAC,EAAE;QAEpB,mCAAmC;QACnC,IAAI,KAAK,QAAQ,KAAK,UAAU;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAmB;IAGzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Divyesh/Desktop/admin-module-nextjs/src/lib/db.ts"],"sourcesContent":["import mysql from \"mysql2\";\r\n\r\n// Create a pool of connections to the database\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || \"localhost\",  // Your MySQL host (defaults to localhost)\r\n  user: process.env.DB_USER || \"root\",      // Your MySQL user (defaults to root)\r\n  password: process.env.DB_PASSWORD || \"admin\",  // Your MySQL password (leave empty for local testing)\r\n  database: process.env.DB_NAME || \"icetpco2\",  // Your database name\r\n});\r\n\r\n// Use a promise wrapper to allow async/await\r\nconst db = pool.promise();\r\n\r\nexport default db;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,+CAA+C;AAC/C,MAAM,OAAO,iIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEA,6CAA6C;AAC7C,MAAM,KAAK,KAAK,OAAO;uCAER"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Divyesh/Desktop/admin-module-nextjs/src/app/api/projects/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"@/lib/db\";\r\nimport { OkPacket, RowDataPacket, FieldPacket } from \"mysql2\";\r\n\r\n\r\n// Handle PATCH requests\r\nexport async function PATCH(req: Request, { params }: { params: { id: string } }) {\r\n  try {\r\n    const { status }: { status: string } = await req.json();\r\n    const { id } = params; // Get the ID from URL parameters\r\n\r\n    if (!status) {\r\n      return NextResponse.json({ message: \"Status is required.\" }, { status: 400 });\r\n    }\r\n\r\n    const numericId = parseInt(id, 10);\r\n    if (isNaN(numericId)) {\r\n      return NextResponse.json({ message: \"Invalid ID format.\" }, { status: 400 });\r\n    }\r\n\r\n    // Execute the database query\r\n    const [result]: [OkPacket, FieldPacket[]] = await db.query(\r\n      \"UPDATE projects SET status = ? WHERE id = ?\",\r\n      [status, numericId]\r\n    );\r\n\r\n    if (result.affectedRows === 0) {\r\n      return NextResponse.json({ message: \"No project found with the given ID.\" }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Project status updated successfully.\" });\r\n  } catch (error: unknown) {\r\n    if (error instanceof Error) {\r\n      return NextResponse.json({ message: `Error updating project: ${error.message}` }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ message: \"Unknown error occurred.\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAKO,eAAe,MAAM,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC9E,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAuB,MAAM,IAAI,IAAI;QACrD,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,iCAAiC;QAExD,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,YAAY,SAAS,IAAI;QAC/B,IAAI,MAAM,YAAY;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,6BAA6B;QAC7B,MAAM,CAAC,OAAO,GAA8B,MAAM,kHAAA,CAAA,UAAE,CAAC,KAAK,CACxD,+CACA;YAAC;YAAQ;SAAU;QAGrB,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAsC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAuC;IAC7E,EAAE,OAAO,OAAgB;QACvB,IAAI,iBAAiB,OAAO;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,CAAC,wBAAwB,EAAE,MAAM,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAClG;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
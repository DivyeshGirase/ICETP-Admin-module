{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Divyesh/Desktop/admin-module-nextjs/src/lib/db.ts"],"sourcesContent":["import mysql from \"mysql2\";\r\n\r\n// Create a pool of connections to the database\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || \"localhost\",  // Your MySQL host (defaults to localhost)\r\n  user: process.env.DB_USER || \"root\",      // Your MySQL user (defaults to root)\r\n  password: process.env.DB_PASSWORD || \"admin\",  // Your MySQL password (leave empty for local testing)\r\n  database: process.env.DB_NAME || \"icetp_db\",  // Your database name\r\n});\r\n\r\n// Use a promise wrapper to allow async/await\r\nconst db = pool.promise();\r\n\r\nexport default db;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,+CAA+C;AAC/C,MAAM,OAAO,iIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;AACnC;AAEA,6CAA6C;AAC7C,MAAM,KAAK,KAAK,OAAO;uCAER"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Divyesh/Desktop/admin-module-nextjs/src/app/api/projects/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"@/lib/db\";\r\nimport { RowDataPacket } from \"mysql2\"; // Import RowDataPacket type\r\nimport { OkPacket } from \"mysql2\";\r\n\r\n// Define the type for a project\r\ninterface Project {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  status: string;\r\n  describe_project?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// Define the payload structure for the PUT request\r\ninterface UpdateProjectPayload {\r\n  id: string;\r\n  status: string;\r\n}\r\n\r\n// Fetch Projects with Pagination\r\nexport async function GET(req: Request) {\r\n  const url = new URL(req.url);\r\n  const page = parseInt(url.searchParams.get('page') || '1', 10); // Default to page 1\r\n  const limit = parseInt(url.searchParams.get('limit') || '7', 10); // Default to 7 projects per page\r\n\r\n  const offset = (page - 1) * limit; // Calculate the offset for pagination\r\n\r\n  try {\r\n    // Fetch the paginated projects from the database\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      \"SELECT * FROM projects LIMIT ? OFFSET ?\",\r\n      [limit, offset]\r\n    );\r\n\r\n    // Log the rows fetched from the database\r\n    console.log(\"Fetched rows from DB:\", rows);\r\n\r\n    // Map rows to match the Project type and handle invalid prices\r\n    const projects: Project[] = rows.map((row) => ({\r\n      id: row.id,\r\n      name: row.title,\r\n      price: parseFloat(row.price), // Ensure price is parsed to a number\r\n      status: row.status,\r\n      describe_project: row.describe_project,\r\n      created_at: row.created_at,\r\n      updated_at: row.updated_at,\r\n    }));\r\n\r\n    // Get the total number of projects to calculate total pages\r\n    const [[totalProjects]] = await db.query<RowDataPacket[]>(\"SELECT COUNT(*) AS count FROM projects\");\r\n    const totalPages = Math.ceil(totalProjects.count / limit);\r\n\r\n    // Return the projects along with the total pages information\r\n    return NextResponse.json(projects, {\r\n      headers: {\r\n        \"X-Total-Pages\": totalPages.toString(), // Add total pages in response header\r\n        \"X-Total-Projects\": totalProjects.count.toString(), // Include total project count\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching projects:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Error retrieving projects\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n// Update Project Status\r\nexport async function PUT(req: Request) {\r\n  try {\r\n    const { id, status }: UpdateProjectPayload = await req.json();\r\n    console.log(\"Received payload:\", { id, status });\r\n\r\n    if (!id || !status) {\r\n      return NextResponse.json(\r\n        { message: \"Invalid data. ID and status are required.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Ensure ID is numeric\r\n    const numericId = parseInt(id, 10);\r\n    if (isNaN(numericId)) {\r\n      return NextResponse.json(\r\n        { message: \"Invalid ID format.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Log to debug if the query is working as expected\r\n    console.log(\"Updating project with ID:\", numericId, \"and status:\", status);\r\n\r\n    const [result]: [OkPacket, any] = await db.query(\r\n      \"UPDATE projects SET status = ? WHERE id = ?\",\r\n      [status, numericId]\r\n    );\r\n\r\n    console.log(\"Update result:\", result);\r\n\r\n    if (result.affectedRows === 0) {\r\n      return NextResponse.json(\r\n        { message: \"No project found with the given ID.\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Project status updated successfully.\" });\r\n  } catch (error: unknown) {\r\n    // Type guard to narrow 'error' to an 'Error' type\r\n    if (error instanceof Error) {\r\n      console.error(\"Error updating project:\", error.message);\r\n      return NextResponse.json(\r\n        { message: `Error updating project status: ${error.message}` },\r\n        { status: 500 }\r\n      );\r\n    } else {\r\n      console.error(\"Unknown error:\", error);\r\n      return NextResponse.json(\r\n        { message: \"Unknown error occurred.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}